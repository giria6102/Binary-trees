#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node*left;
    node*right;
    
    node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};

node*buildNode(node*root){
    cout<<"Enter the data"<<endl;
    int data;
    cin>>data;
    root=new node(data);
    if(data==-1){
        return NULL;
    }
    cout<<"Enter the value of data to enter in left "<< data <<endl;
    root->left=buildNode(root->left);
    cout<<" Enter the value of data to enter in right "<< data <<endl;
    root->right=buildNode(root->right);
    
    return root;
}
void levelorderTraversal(node*root){
    queue<node*>q;
    q.push(root);
    q.push(NULL);
     while(!q.empty()){
         node*temp=q.front();
         q.pop();
         if(temp==NULL){
             cout<<endl;
             if(!q.empty()){
             q.push(NULL);
         }
         }
         else{
             cout<<temp->data<<" ";
             if(temp->left){
                 q.push(temp->left);
             }
             if(temp->right){
                 q.push(temp->right);
             }
         }
         
     }
}
void inorder(node*root){
    //base case
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void preorder(node*root){
    //base case
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void postorder(node*root){
    //base case
    if(root==NULL){
        return;
    }
    
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
int main() {
     node*root=NULL;
     
     root=buildNode(root);
     cout<<"printing level order traversal "<<endl;
     levelorderTraversal(root);
     cout<<"inorder traversal is "<<endl;
     inorder(root);
     cout<<endl;
     cout<<"preorder traversal is "<<endl;
     preorder(root);
     cout<<endl;
     cout<<"postorder traversal is "<<endl;
     postorder(root);

    return 0;
}
