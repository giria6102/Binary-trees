Brute force -T(c)-O(n^2)
// Function to return the diameter of a Binary Tree.
    int height(struct Node* node){
        if(node==NULL){
            return 0;
        }
        
        int left=height(node->left);
        int right=height(node->right);
        
        int ans=max(left,right)+1;
        return ans;
        
    }
    int diameter(Node* root) {
       if(root==NULL){
           return 0;
       }
       int opt1=diameter(root->left);
       int opt2=diameter(root->right);
       int opt3=height(root->left)+height(root->right)+1;
       int  ans=max(opt1,max(opt2,opt3));
       return ans;
    }
optimised ,T(c)=O(n)
 
    pair<int,int> fastdia(Node*root){
        if(root==NULL){
            pair<int ,int>p=make_pair(0,0);
            return p;
        }
        pair<int,int>left=fastdia(root->left);
        pair<int,int>right=fastdia(root->right);
        
        int opt1=left.first;
        int opt2=right.first;
        int opt3=left.second+right.second+1;
        pair<int,int>ans;
        ans.first=max(opt1,max(opt2,opt3));
        ans.second=max(left.second,right.second)+1;
        return ans;
    }
    int diameter(Node* root) {
       return fastdia(root).first;
    }
